openapi: 3.0.1
info:
  title: Summits
  description: This project provides a domain and wrapper to evaluate backend technologies.  The domain is just a dummy domain which is coincidentally well known to the author ...'
  contact:
    email: frank.rittinger@virtual-identity.com
  license:
    name: MIT
  version: 0.0.1
externalDocs:
  description: Find out more about Summits on github.
  url: https://github.com/frittinger/summits
tags:
- name: summit
  description: A mountain summit people like to ascent.
- name: user
  description: A person that likes to ascent mountains, i.e. a mountaineer. Since a user could also be an administrator we stick to the generasl term "user"
- name: ascent
  description: The combination of a mountaineer that tries to reach a mountain summit. Which will not always be successful ...
paths:
  /summit/findByHeight:
    get:
      tags:
      - summit
      summary: Finds summits by height.
      description: Summits can be searched for by height. So either all mountains higher or lower then a given height.
      operationId: findSummitsByHeight
      parameters:
      - name: height
        in: query
        description: The minimum or maximum height, currently in meters (could be made configurable in a later phase).
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: rel
        in: query
        description: The relation to the height, either lower or higher
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - higher
          - lower
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Summit'
        400:
          description: Invalid status value
          content: {}
  /summit/findByCountry:
    get:
      tags:
      - summit
      summary: Find all summits of a country.
      description: Currently only the western Alps are supported, i.e. Switzerland, France, etc.
      operationId: findSummitsByCountry
      parameters:
      - name: country
        in: query
        description: Countries to filter by
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Summit'
        400:
          description: Invalid country
          content: {}
  /summit/{summitId}:
    get:
      tags:
      - summit
      summary: Find a summit by ID
      description: Returns a single summit
      operationId: getSummitById
      parameters:
      - name: summitId
        in: path
        description: ID of the summit to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Summit'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Summit not found
          content: {}
  /ascent:
    post:
      tags:
      - ascent
      summary: Create a new ascent entry for a user (mountaineer) and a summit.
      operationId: ascentEntry
      requestBody:
        description: A new ascent entry for a user and a summit.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Ascent'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ascent'
        400:
          description: Invalid Ascent
          content: {}
  /ascent/{ascentId}:
    get:
      tags:
      - ascent
      summary: Find ascent by ID
      operationId: getAscentById
      parameters:
      - name: ascentId
        in: path
        description: ID of ascent that needs to be fetched
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ascent'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Ascent not found
          content: {}
    delete:
      tags:
      - ascent
      summary: Delete ascent by ID
      operationId: deleteAscent
      parameters:
      - name: ascentId
        in: path
        description: ID of the ascent that needs to be deleted
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Ascent not found
          content: {}
  /ascent/findBySummit:
    get:
      tags:
      - ascent
      summary: Finds ascents of the given summit
      description: Ascents can be searched by a summit
      operationId: findSAscentsBySummit
      parameters:
      - name: summitId
        in: query
        description: The summit ID the user wants all ascents for
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ascent'
        400:
          description: Invalid status value
          content: {}
  /ascent/findByUser:
    get:
      tags:
      - ascent
      summary: Finds all ascents of a user
      description: Ascents can be searched by users, not necessarily the currently logged in user
      operationId: findAscentsByUser
      parameters:
      - name: userId
        in: query
        description: The user ID
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ascent'
        400:
          description: Invalid status value
          content: {}
  /user:
    post:
      tags:
      - user
      summary: Create a user
      description: Used to create new users (i.e. mountaineers) in the system. This gives room for security aspects ...
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The username of the user that should be fetched.
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    Ascent:
      type: object
      properties:
        id:
          type: integer
          format: int64
        summitId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        ascentDate:
          type: string
          format: date-time
          description: The date when the ascent was tried by a mountaineer.
        status:
          type: string
          description: status of the ascent, i.e. success or abord
          enum:
          - success
          - abord
          - accident
        tourType:
          type: string
          description: type of tour for the the ascent, i.e. ski, snowshoe, hike, climb
          enum:
          - ski
          - snowshoe
          - hike
          - climb
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        userStatus:
          type: string
          description: User Status which can be used for various aspects not yet defined ...
          enum:
            - approved
    Summit:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Matterhorn
        height:
          type: integer
          format: int32
          description: The height of the summit, currently in meter above sea level
          example: 4482
        country:
          type: string
          description: The country where this summit resides mostly; currently restricted to few countries of the western Alpes
          enum:
          - Switzerland
          - France
          - Italy
          - Austria
          - Germany
